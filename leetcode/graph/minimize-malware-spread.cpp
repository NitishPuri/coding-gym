// https://leetcode.com/problems/minimize-malware-spread/
// hard, depth-first-search, breadth-first-search, union-find, matrix, graph

#include <iostream>
#include <vector>
#include <set>
#include <queue>

using namespace std;

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        
        set<int> initial_set(initial.begin(), initial.end());
        
        int answer = -1;
        int max_nodes = 0;
        for(int i = 0; i < initial.size(); i++) {                    
            if(initial_set.find(initial[i]) == initial_set.end()) {
                continue;
            }
            queue<int> q;
            q.push(initial[i]);
            set<int> infected;
            infected.insert(initial[i]);
            
            int n = graph.size();
            
            bool found_another_infected_node = false;
            while(!q.empty()) {
                int curr = q.front(); q.pop();
                for(int j = 0; j < n; j++) {
                    if(j != curr && graph[j][curr] == 1 && infected.find(j) == infected.end()) {
                        if(found_another_infected_node == false && initial_set.find(j) != initial_set.end()) {
                            found_another_infected_node = true;                            
                            initial_set.erase(j);
                        } 
                        infected.insert(j);
                        q.push(j);
                    }
                }
            }
            
            if(found_another_infected_node == false) {
                if(max_nodes < infected.size()) {
                    max_nodes = infected.size();
                    answer = initial[i];
                }
                if(max_nodes == infected.size()) {
                    answer = min(answer, initial[i]);
                }
            }                                    
        }
        
        if(answer == -1) {
            answer = *min_element(initial.begin(), initial.end());
        }
        
        return answer;
        
    }
};

int main() {
    Solution s;
    // vector<vector<int>> g {
    //     {1,1,0},
    //     {1,1,0},
    //     {0,0,1}
    // };
    // vector<int> i{0,1};
    // cout << s.minMalwareSpread(g, i);

    vector<vector<int>> g {
        {1,0,0,0,0,0},
        {0,1,0,0,0,0},
        {0,0,1,0,0,0},
        {0,0,0,1,1,0},
        {0,0,0,1,1,0},
        {0,0,0,0,0,1}
    };
    vector<int> i {5,0};
    cout << s.minMalwareSpread(g, i);

}